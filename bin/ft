#!/usr/bin/env python3
"""
Accurate directory file counter - counts ALL files in top-level directories
Designed to run overnight for complete accuracy with millions of files
"""

import os
import sys
from pathlib import Path
import time
from datetime import datetime, timedelta

def format_number(num: int) -> str:
    """Format number with thousands separator"""
    return f"{num:,}"

def format_duration(seconds: float) -> str:
    """Format duration in human-readable format"""
    td = timedelta(seconds=seconds)
    hours = td.seconds // 3600
    minutes = (td.seconds % 3600) // 60
    secs = td.seconds % 60
    
    if td.days > 0:
        return f"{td.days}d {hours}h {minutes}m {secs}s"
    elif hours > 0:
        return f"{hours}h {minutes}m {secs}s"
    elif minutes > 0:
        return f"{minutes}m {secs}s"
    else:
        return f"{secs:.1f}s"

def count_files_in_directory(dir_path: Path) -> int:
    """
    Count ALL files in a directory and its subdirectories.
    Returns exact file count.
    """
    file_count = 0
    error_count = 0
    
    print(f"  Starting count for: {dir_path.name}")
    start_time = time.time()
    last_update = start_time
    
    try:
        for root, dirs, files in os.walk(dir_path):
            file_count += len(files)
            
            # Update progress every 5 seconds
            current_time = time.time()
            if current_time - last_update >= 5:
                elapsed = current_time - start_time
                rate = file_count / elapsed if elapsed > 0 else 0
                print(f"    {dir_path.name}: {format_number(file_count)} files found so far "
                      f"({format_number(int(rate))} files/sec, {format_duration(elapsed)} elapsed)")
                last_update = current_time
                
    except PermissionError as e:
        error_count += 1
        print(f"    ⚠️  Permission denied in {dir_path.name}: {e}")
    except Exception as e:
        error_count += 1
        print(f"    ⚠️  Error in {dir_path.name}: {e}")
    
    elapsed = time.time() - start_time
    print(f"  ✓ Completed {dir_path.name}: {format_number(file_count)} files in {format_duration(elapsed)}")
    
    if error_count > 0:
        print(f"    Note: Encountered {error_count} errors (some files may be inaccessible)")
    
    return file_count

def main():
    # Get the target directory (current directory by default)
    target_dir = Path(sys.argv[1] if len(sys.argv) > 1 else '.')
    
    if not target_dir.exists():
        print(f"Error: Directory '{target_dir}' does not exist")
        sys.exit(1)
    
    print("=" * 80)
    print("ACCURATE FILE COUNTER - FULL SCAN")
    print("=" * 80)
    print(f"Target directory: {target_dir.absolute()}")
    print(f"Started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("This will count EVERY file. With millions of files, this may take hours.")
    print("The script will continue running until complete. Feel free to leave it overnight.")
    print("=" * 80)
    print()
    
    # Get all top-level directories
    directories = []
    try:
        for item in sorted(target_dir.iterdir()):
            if item.is_dir() and not item.name.startswith('.'):
                directories.append(item)
    except PermissionError:
        print("Error: Cannot read target directory")
        sys.exit(1)
    
    print(f"Found {len(directories)} top-level directories to analyze")
    print("-" * 80)
    print()
    
    # Count files in each directory
    results = {}
    start_time = time.time()
    
    for i, dir_path in enumerate(directories, 1):
        print(f"[{i}/{len(directories)}] Processing: {dir_path.name}")
        
        dir_start = time.time()
        file_count = count_files_in_directory(dir_path)
        dir_time = time.time() - dir_start
        
        results[dir_path.name] = {
            'count': file_count,
            'time': dir_time
        }
        
        # Show running total
        total_so_far = sum(r['count'] for r in results.values())
        elapsed_total = time.time() - start_time
        print(f"  Running total: {format_number(total_so_far)} files found so far")
        print(f"  Total elapsed time: {format_duration(elapsed_total)}")
        print()
    
    total_time = time.time() - start_time
    
    # Sort results by file count (descending)
    sorted_results = sorted(results.items(), key=lambda x: x[1]['count'], reverse=True)
    
    # Calculate totals
    total_files = sum(r['count'] for r in results.values())
    
    # Display results to console
    print("\n" + "=" * 80)
    print("FINAL REPORT - TOP-LEVEL DIRECTORIES BY FILE COUNT")
    print("=" * 80)
    print(f"{'Rank':<6} {'Directory':<35} {'File Count':>20} {'Scan Time':>15}")
    print("-" * 80)
    
    for rank, (dir_name, info) in enumerate(sorted_results, 1):
        print(f"{rank:<6} {dir_name:<35} {format_number(info['count']):>20} {format_duration(info['time']):>15}")
    
    print("-" * 80)
    print(f"{'TOTAL':<42} {format_number(total_files):>20} {format_duration(total_time):>15}")
    print("=" * 80)
    
    # Statistics
    print(f"\nStatistics:")
    print(f"  • Total directories scanned: {len(results)}")
    print(f"  • Total files found: {format_number(total_files)}")
    print(f"  • Average files per directory: {format_number(total_files // len(results) if results else 0)}")
    print(f"  • Total scan time: {format_duration(total_time)}")
    print(f"  • Average processing speed: {format_number(int(total_files / total_time))} files/second")
    print(f"  • Completed at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Save detailed report to file
    report_filename = f"file_count_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    with open(report_filename, 'w') as f:
        f.write("=" * 80 + "\n")
        f.write("ACCURATE FILE COUNT REPORT\n")
        f.write("=" * 80 + "\n")
        f.write(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"Location: {target_dir.absolute()}\n")
        f.write(f"Total scan time: {format_duration(total_time)}\n")
        f.write(f"Total files: {format_number(total_files)}\n")
        f.write("=" * 80 + "\n\n")
        
        f.write("DIRECTORIES BY FILE COUNT (LARGEST FIRST):\n")
        f.write("-" * 80 + "\n")
        f.write(f"{'Rank':<6} {'Directory':<35} {'File Count':>20} {'Scan Time':>15}\n")
        f.write("-" * 80 + "\n")
        
        for rank, (dir_name, info) in enumerate(sorted_results, 1):
            f.write(f"{rank:<6} {dir_name:<35} {format_number(info['count']):>20} {format_duration(info['time']):>15}\n")
        
        f.write("-" * 80 + "\n")
        f.write(f"{'TOTAL':<42} {format_number(total_files):>20} {format_duration(total_time):>15}\n")
        f.write("=" * 80 + "\n\n")
        
        # Add percentage breakdown
        f.write("PERCENTAGE BREAKDOWN:\n")
        f.write("-" * 80 + "\n")
        for rank, (dir_name, info) in enumerate(sorted_results, 1):
            percentage = (info['count'] / total_files * 100) if total_files > 0 else 0
            bar_length = int(percentage / 2)  # Scale to 50 chars max
            bar = '█' * bar_length
            f.write(f"{rank:3}. {dir_name:<30} {percentage:6.2f}% {bar}\n")
        
        f.write("\n" + "=" * 80 + "\n")
        f.write("END OF REPORT\n")
        f.write("=" * 80 + "\n")
    
    print(f"\n✅ Detailed report saved to: {report_filename}")
    print("\n" + "=" * 80)
    print("SCAN COMPLETE")
    print("=" * 80)

if __name__ == "__main__":
    main()