#!/usr/bin/env python3
"""
yank - Fetch and pull all git repositories in the current directory in parallel.
Pretty UI with rich progress display.
"""

import argparse
import concurrent.futures
import importlib.util
import math
import os
import signal
import subprocess
import sys
import time
from enum import Enum
from pathlib import Path
from typing import Dict, List, Optional, Tuple


def handle_rich_install_error(error_prefix, exception):
    """Handle errors during rich installation with consistent error reporting"""
    print(f"{error_prefix}{exception}")
    print("Please install rich manually with: pip install rich")
    sys.exit(1)


def ensure_rich_installed():
    """Check if rich is installed, and install it if not."""
    if importlib.util.find_spec("rich") is not None:
        return

    print("The 'rich' package is not installed. Installing it now...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "rich"])
        print("Rich successfully installed.")
    except subprocess.CalledProcessError as e:
        handle_rich_install_error("Error installing rich: ", e)
    except Exception as e:
        handle_rich_install_error("Unexpected error installing rich: ", e)

    # Force reload modules to make the newly installed rich available
    if "rich" in sys.modules:
        del sys.modules["rich"]
    if "rich.console" in sys.modules:
        del sys.modules["rich.console"]


# Ensure rich is installed before attempting to import it
ensure_rich_installed()

from rich import box
from rich.columns import Columns

# Now import rich modules
from rich.console import Console
from rich.live import Live
from rich.panel import Panel
from rich.table import Table
from rich.text import Text


# Status enums
class Status(Enum):
    WAITING = "waiting"
    FETCHING = "fetching"
    PULLING = "pulling"
    DONE = "done"
    ERROR = "error"


# Status colors
STATUS_STYLES = {
    Status.WAITING: "blue",
    Status.FETCHING: "yellow",
    Status.PULLING: "magenta",  # Changed from green to magenta
    Status.DONE: "green",  # Changed from magenta to green
    Status.ERROR: "red",
}

# Display names for each status
STATUS_NAMES = {
    Status.WAITING: "Waiting",
    Status.FETCHING: "Fetching",
    Status.PULLING: "Pulling",
    Status.DONE: "Completed",
    Status.ERROR: "Error",
}


class GitRepo:
    """Represents a git repository with status tracking"""

    def __init__(self, path: Path):
        self.path = path.absolute()  # Store absolute path
        self.name = path.name
        self.status = Status.WAITING
        self.fetch_status = Status.WAITING
        self.pull_status = Status.WAITING
        self.error_message: Optional[str] = None
        self.output_message: Optional[str] = None

    def __str__(self) -> str:
        return self.name

    def get_status_renderable(self) -> Text:
        """Get a compact representation of the repo status for the grid view"""
        # Determine the overall status color
        if self.error_message:
            color = STATUS_STYLES[Status.ERROR]
        elif self.status == Status.DONE:
            color = STATUS_STYLES[Status.DONE]
        elif self.pull_status == Status.PULLING:
            color = STATUS_STYLES[Status.PULLING]
        elif self.fetch_status == Status.FETCHING:
            color = STATUS_STYLES[Status.FETCHING]
        else:
            color = STATUS_STYLES[Status.WAITING]

        # Create the text object with appropriate color
        return Text(f"{self.name}", style=color)


class GitRepoManager:
    """Manages multiple git repositories with parallel operations"""

    # Define git commands at class level
    FETCH_CMD = [
        "git",
        "fetch",
        "--quiet",
        "--all",
        "--prune",
        "--tags",
        "--prune-tags",
        "--recurse-submodules=yes",
    ]

    PULL_CMD = [
        "git",
        "pull",
        "--quiet",
        "--all",
        "--prune",
        "--rebase",
    ]

    def __init__(self, max_workers: int = 4, use_grid: bool = True):
        self.console = Console()
        self.repos: List[GitRepo] = []
        self.max_workers = max_workers
        self.use_grid = use_grid
        # Store the original directory
        self.original_dir = Path.cwd().absolute()
        self.executor = None
        # Flag to control display updates
        self.should_update_display = True
        self._scan_repos()

    def _collect_error_logs(self) -> List[Tuple[str, str]]:
        """Collect all error messages with repo names"""
        error_logs = []
        error_logs.extend(
            (repo.name, repo.error_message)
            for repo in self.repos
            if repo.status == Status.ERROR and repo.error_message
        )
        return error_logs

    def _print_error_summary(self) -> None:
        """Print a summary of all errors at the end"""
        error_logs = self._collect_error_logs()
        if error_logs:
            self.console.print("\n[bold red]Error Details:[/bold red]")
            for repo_name, error_msg in error_logs:
                self.console.print(f"[bold red]{repo_name}:[/bold red] {error_msg}")

    def _scan_repos(self) -> None:
        """Find all git repositories in the current directory"""
        for item in Path(".").iterdir():
            if not item.is_dir():
                continue

            git_dir = item / ".git"
            if git_dir.exists() and git_dir.is_dir():
                self.repos.append(GitRepo(item))

        # Sort repos by name for consistent display
        self.repos.sort(key=lambda x: x.name)

    def _render_repo_grid(self) -> Panel:
        """Create a grid of repositories with their status colors"""
        renderables = []

        for repo in self.repos:
            # Determine the overall status color
            if repo.error_message:
                color = STATUS_STYLES[Status.ERROR]
            elif repo.status == Status.DONE:
                color = STATUS_STYLES[Status.DONE]
            elif repo.pull_status == Status.PULLING:
                color = STATUS_STYLES[Status.PULLING]
            elif repo.fetch_status == Status.FETCHING:
                color = STATUS_STYLES[Status.FETCHING]
            else:
                color = STATUS_STYLES[Status.WAITING]

            # Create the text object with appropriate color
            renderables.append(Text(f"{repo.name}", style=color))

        # Calculate columns based on terminal width
        terminal_width = self.console.width
        max_name_length = max((len(repo.name) for repo in self.repos), default=15)
        estimated_item_width = max_name_length + 6  # Add padding
        available_width = terminal_width - 10
        num_columns = max(1, min(4, available_width // estimated_item_width))

        # Create columns
        columns = Columns(
            renderables,
            equal=True,
            expand=True,
            padding=(0, 2),
        )

        # Create status counts
        waiting = sum(1 for repo in self.repos if repo.status == Status.WAITING)
        fetching = sum(1 for repo in self.repos if repo.fetch_status == Status.FETCHING)
        pulling = sum(1 for repo in self.repos if repo.pull_status == Status.PULLING)
        done = sum(1 for repo in self.repos if repo.status == Status.DONE)
        error = sum(1 for repo in self.repos if repo.status == Status.ERROR)

        # Build status text
        status_parts = []
        status_parts.append(f"Total: {len(self.repos)}")
        if waiting > 0:
            status_parts.append(f"Starting: {waiting}")
        if fetching > 0:
            status_parts.append(f"Fetching: {fetching}")
        if pulling > 0:
            status_parts.append(f"Pulling: {pulling}")
        if done > 0:
            status_parts.append(f"Completed: {done}")
        if error > 0:
            status_parts.append(f"Error: {error}")

        status_text = " | ".join(status_parts)

        return Panel(
            columns,
            title="[bold blue]Git Repository Updates[/bold blue]",
            subtitle=f"[italic]{status_text}[/italic]",
            border_style="blue",
        )

    def _render_color_key(self) -> Panel:
        """Create a simple color key panel"""
        table = Table(box=None, show_header=False, padding=(0, 2), expand=True)

        # Add status columns
        for status in Status:
            table.add_column(style=f"bold {STATUS_STYLES[status]}", justify="center")

        # Add status names
        table.add_row(*[STATUS_NAMES[status] for status in Status])

        return Panel(table, border_style="dim", expand=True)

    def _display_progress(self) -> None:
        """Display the current progress without using Live context"""
        if not self.should_update_display:
            return

        # Clear the console (but keep scrollback)
        self.console.clear()

        # Create and render panels
        repo_grid = self._render_repo_grid()
        color_key = self._render_color_key()

        # Display panels
        self.console.print(repo_grid)
        self.console.print(color_key)

    def _set_repo_error(self, repo: GitRepo, error_msg: str, context: str = "") -> None:
        """Set error status on a repository with proper logging"""
        if context:
            error_text = f"[ERROR] {repo.name} ({context}): {error_msg}"
        else:
            error_text = f"[ERROR] {repo.name}: {error_msg}"

        self.console.print(error_text)

        repo.status = Status.ERROR
        repo.error_message = error_msg
        if repo.fetch_status == Status.WAITING:
            repo.fetch_status = Status.ERROR
        if repo.pull_status == Status.WAITING:
            repo.pull_status = Status.ERROR

    def _run_git_command(self, repo: GitRepo, cmd: List[str], operation: str) -> bool:
        """Run a git command and handle results and errors consistently"""
        try:
            result = subprocess.run(
                cmd, capture_output=True, text=True, check=True, cwd=str(repo.path)
            )
            if result.stdout.strip():
                repo.output_message = result.stdout.strip()
            return True
        except subprocess.CalledProcessError as e:
            error_msg = e.stderr.strip() or f"{operation} failed"
            self._set_repo_error(repo, error_msg, operation.lower())
            return False
        except Exception as e:
            error_msg = f"Unexpected error during {operation.lower()}: {str(e)}"
            self._set_repo_error(repo, error_msg)
            return False

    def _process_repo(self, repo: GitRepo) -> None:
        """Process a single repository (fetch and pull)"""
        try:
            # Verify the repository path exists
            if not os.path.exists(str(repo.path)) or not os.path.isdir(str(repo.path)):
                error_msg = "Repository directory not found or not accessible"
                self._set_repo_error(repo, error_msg)
                return

            # Verify it's actually a git repository
            git_dir = os.path.join(str(repo.path), ".git")
            if not os.path.exists(git_dir) or not os.path.isdir(git_dir):
                error_msg = "Not a git repository (missing .git directory)"
                self._set_repo_error(repo, error_msg)
                return

            # Fetch
            repo.fetch_status = Status.FETCHING
            if not self._run_git_command(repo, self.FETCH_CMD, "Fetch"):
                return
            repo.fetch_status = Status.DONE

            # Pull
            repo.pull_status = Status.PULLING
            if self._run_git_command(repo, self.PULL_CMD, "Pull"):
                repo.pull_status = Status.DONE
                repo.status = Status.DONE

        except Exception as e:
            # Catch any other exceptions
            error_msg = f"Unexpected error: {str(e)}"
            self._set_repo_error(repo, error_msg)

    def run(self) -> None:
        """Run updates on all repositories in parallel"""
        if not self.repos:
            self.console.print(
                "[yellow]No git repositories found in the current directory.[/yellow]"
            )
            return

        # Print initial information
        self.console.print(
            f"[bold blue]Found {len(self.repos)} repositories[/bold blue]"
        )
        self.console.print(f"[cyan]Using {self.max_workers} worker threads[/cyan]")

        # Print git commands that will be run
        fetch_cmd_str = " ".join(self.FETCH_CMD)
        pull_cmd_str = " ".join(self.PULL_CMD)
        self.console.print(f"[cyan]FETCH: [bold]{fetch_cmd_str}[/bold][/cyan]")
        self.console.print(f"[cyan] PULL: [bold]{pull_cmd_str}[/bold][/cyan]")

        # Set up signal handler for graceful termination
        original_sigint_handler = signal.getsignal(signal.SIGINT)

        def handle_sigint(sig, frame):
            """Handle Ctrl+C by terminating subprocesses and exiting gracefully"""
            # Stop updating the display to prevent visual clutter during shutdown
            self.should_update_display = False

            if self.executor:
                self.console.print(
                    "\n[bold yellow]Terminating... Please wait for subprocesses to clean up[/bold yellow]"
                )
                self.executor.shutdown(wait=False, cancel_futures=True)

            # Print error summary before exiting
            self._print_error_summary()

            signal.signal(
                signal.SIGINT, original_sigint_handler
            )  # Restore original handler
            sys.exit(0)

        signal.signal(signal.SIGINT, handle_sigint)

        # Create background thread for updating the display
        def display_updater():
            """Thread function to update the display at regular intervals"""
            update_interval = 2  # Update every 2 seconds
            while self.should_update_display:
                try:
                    self._display_progress()
                except Exception as e:
                    # If display fails, log error but continue
                    print(f"Display error: {e}")
                time.sleep(update_interval)

        # Start the display thread
        display_thread = None
        try:
            # Start display update thread
            import threading

            self.should_update_display = True
            display_thread = threading.Thread(target=display_updater, daemon=True)
            display_thread.start()

            # Process repos in parallel
            with concurrent.futures.ThreadPoolExecutor(
                max_workers=self.max_workers
            ) as executor:
                self.executor = executor
                # Submit all tasks
                futures = [
                    executor.submit(self._process_repo, repo) for repo in self.repos
                ]

                # Wait for all tasks to complete
                for future in concurrent.futures.as_completed(futures):
                    try:
                        future.result()  # Get result to propagate exceptions
                    except Exception as e:
                        # Log any unexpected exceptions
                        print(f"Unexpected error: {e}")

                self.executor = None

            # Wait for display thread to show final status
            time.sleep(0.5)

        except KeyboardInterrupt:
            # Handle Ctrl+C gracefully
            self.console.print(
                "\n[bold yellow]Operation canceled by user[/bold yellow]"
            )
            self._print_error_summary()
            return

        finally:
            # Clean up
            self.should_update_display = False
            if display_thread and display_thread.is_alive():
                display_thread.join(timeout=1.0)

            # Show final display once more
            try:
                self._display_progress()
            except Exception:
                pass

            # Restore signal handler
            signal.signal(signal.SIGINT, original_sigint_handler)

        # Final statistics
        success_count = sum(1 for repo in self.repos if repo.status == Status.DONE)
        error_count = sum(1 for repo in self.repos if repo.status == Status.ERROR)

        self.console.print(
            f"\n[bold green]{success_count} repositories updated successfully[/bold green]"
        )
        if error_count:
            self.console.print(
                f"[bold red]{error_count} repositories had errors[/bold red]"
            )

        # Print error details at the end
        self._print_error_summary()


def main():
    parser = argparse.ArgumentParser(
        description="Update all git repositories in the current directory"
    )
    parser.add_argument(
        "threads",
        nargs="?",
        default="4",
        help="Number of threads to use (default: 4, use 'unlimited' for one thread per repo)",
    )
    parser.add_argument(
        "--table", action="store_true", help="Force table view instead of grid view"
    )
    args = parser.parse_args()

    # Determine max workers
    if args.threads.lower() == "unlimited":
        # Will be adjusted based on repo count
        max_workers = 9999
    else:
        try:
            max_workers = int(args.threads)
            if max_workers < 1:
                raise ValueError("Thread count must be at least 1")
        except ValueError:
            print(f"Error: Invalid thread count '{args.threads}'")
            sys.exit(1)

    # Run the manager
    manager = GitRepoManager(max_workers=max_workers, use_grid=not args.table)
    manager.run()


if __name__ == "__main__":
    main()
